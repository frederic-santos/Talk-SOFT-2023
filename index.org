#+TITLE: Ouvrir et partager ses codes informatiques
#+AUTHOR: Frédéric Santos
#+EMAIL: frederic.santos@u-bordeaux.fr
#+DATE: Jeudi 22 juin 2023
#+REVEAL_INIT_OPTIONS: width:1650, height:950, margin: 0.1, minScale:0.2, maxScale:2.5, transition:'fade', slideNumber:'c/t'
#+STARTUP: num
#+OPTIONS: toc:nil email:t timestamp:nil reveal_global_header:t todo:nil
#+REVEAL_THEME: sky
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Atelier pour les journées SOFT (Bordeaux, 2023).">
#+REVEAL_POSTAMBLE: <p> Créé par Frédéric Santos </p>
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js

* IN-PROGRESS Ouvrir (simplement)
** Versionner avec Git, publier sur des forges
#+REVEAL_HTML: <div class="column" style="float:left; text-align:left; width: 65%">
- La solution idéale, au croisement de plusieurs pratiques efficaces pour la collaboration, la traçabilité, la transparence.
- Démarche générale : versionner localement avec Git, puis "pousser" périodiquement sur des /forges/ logicielles distantes (GitLab.com, GitHub, ...).
- Un exemple : [[https://gitlab.com/f-santos/rdss][le dépôt d'un package R sur GitLab.com]].
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; text-align:center; width: 35%">
[[./images/GitGitHubGitLab.png]]
#+REVEAL_HTML: </div>

** Quelques aspects "juridiques"
- *Choix de la licence*. Le code mis à disposition publiquement devrait disposer d'une licence d'utilisation. Si vous souhaitez opter pour une licence libre, la licence [[http://www.cecill.info/][CeCILL]] est une adaptation en droit français des principes de la licence libre GPL. (La licence CeCILL a été créée par les principaux EPST français.)
- *Choix de la forge*. La politique de sécurité des services d'information du CNRS ou d'UB est assez floue sur ce point, mais l'usage de forges Git privées (GitHub appartient à Microsoft) peut être vu comme problématique. On pourra préférer l'une des forges institutionnelles ([[https://gitlab.huma-num.fr/users/sign_in][Huma-Num]], [[https://gitub.u-bordeaux.fr/][GitUB]]) basées sur GitLab.

* DONE Partager (avec de meilleures pratiques)
  CLOSED: [2023-05-31 mer. 08:58]
** Au-delà du script : les notebooks
- Les notebooks (ou /documents computationnels/) permettent de mélanger du code, des sorties de code et du texte en langue naturelle dans un même document, suivant la philosophie de la /programmation lettrée/ de Donald Knuth.
- Offre la meilleure présentation possible d'un code, par la possibilité de le documenter exhaustivement.
- Idéal en tant que Supporting Information d'un article ([[https://karmenhbc.github.io/SNB_data_analysis/#][un exemple ici]]).
- Plusieurs systèmes possibles : [[https://jupyter.org/][JupyterLab]] (Julia, R, Python), [[https://plutojl.org/][Pluto]] (Julia uniquement), [[https://orgmode.org/worg/org-contrib/babel/][Org-mode]] (tous langages), [[https://quarto.org/][Quarto]] (Julia, Observable, Python, R), etc.
- [[https://mybinder.org/v2/gh/binder-examples/r/master?filepath=index.ipynb][Une démonstration d'un notebook R + Jupyter]]

** Rendre son code plus reproductible
- Ouvrir son code assure la /transparence/ des analyses réalisées, mais pas nécessairement sa /reproductibilité/.
- D'un ordinateur à l'autre, les résultats pourront varier (ou le code pourra même ne plus s'exécuter du tout !) en fonction des versions logicielles, des versions de packages, etc.
- En plus de l'ouverture du code, une bonne pratique est de décrire, ou de rendre portable, l'environnement logiciel que l'on a utilisé.

*** Des solutions pour Julia ou Python
- En Julia, de simples [[https://pkgdocs.julialang.org/v1/toml-files/][fichiers texte de "manifeste"]] (=Project.toml=, =Manifest.toml=) permettent de spécifier les versions de packages désirées à l'échelle de chaque projet. Ces fichiers rendent l'environnement logiciel exact portable sur une autre machine sans difficulté, et assurent la reproductibilité des résultats.
- La philosophie de Python est équivalente, avec là encore /fichiers de configuration/ que l'on peut définir à l'échelle du projet.

*** Des solutions pour R
#+REVEAL_HTML: <div class="column" style="float:left; width: 60%">
- En R, il n'existe pas d'équivalent "natif" des fichiers de configuration de Julia ou Python.
- L'outil le plus léger est le package ={groundhog}=, [[https://CRAN.R-project.org/package=groundhog][disponible sur le CRAN]], qui permet de spécifier et d'utiliser les versions de packages R (et leurs dépendances) correspondant une date précise.
- Un outil plus lourd mais plus complet est le package ={renv}=, qui permet lui aussi de spécifier et d'isoler des versions de packages spécifiques pour un projet.
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 40%">
[[./images/groundhog.png]]
#+REVEAL_HTML: </div>

** Quelques exemples concrets
Le fait de partager le code (et si possible, le manuscrit) d'un article scientifique en ayant pris quelques mesures simples de reproductibilité est généralement connu sous le nom de /compendium/. En voici quelques exemples récents, librement accessibles :
- [[https://github.com/ercrema/NeolithicKoreaDemography][Un dépôt GitHub avec des notebooks Rmarkdown]] accompagnant une pré-publication
- [[https://github.com/sjoleary/CLE_GSI][Un exemple similaire]] dans une autre discipline
- [[https://aqueff.github.io/LapidaryCaribbeanRegionalArticle/][Une pré-publication sous forme HTML]] rédigée avec Quarto
 
** Reproductibilité computationnelle avec Binder

#+REVEAL_HTML: <div class="column" style="float:left; text-align:left; width: 50%">
- Le [[https://mybinder.org/][Binder Project]] (MyBinder) permet de partager aisément des environnements logiciels reproductibles, exécutables sans effort par l'utilisateur final (reviewer, collègue, ...).
- Binder prend en charge les langages de programmation usuels en science des données : Julia, Python, R.
- Actuellement maintenu par l'équipe de Jupyter, il prend aussi en charge Rstudio.
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; text-align:center; width: 50%">
[[./images/binder-logo.jpg]]
#+REVEAL_HTML: </div>

*** Principe

1. Avoir un dépôt GitLab / GitHub.
2. Y avoir entreposé du code informatique sous la forme de scripts, ou mieux, de notebooks (Jupyter, Quarto, Rmarkdown).
3. Avoir spécifié des versions du langage utilisé (par exemple, R 4.2.3) et des packages mobilisés pour les analyses.
4. Soumettre le lien du dépôt au service [[https://mybinder.org/][MyBinder]].
5. Un environnement spécifique est alors créé sur un serveur distant, et devient exécutable par tout utilisateur simplement via son navigateur web.

*** Un exemple de publication "binderisée"

- *Référence* : Boettiger, C. (2018). From noise to knowledge: how randomness generates novel phenomena and reveals information /Ecology Letters/. https://doi.org/10.1111/ele.13085
- Dépôt GitHub : https://github.com/cboettig/noise-phenomena
- [[http://beta.mybinder.org/v2/gh/cboettig/noise-phenomena/master?urlpath=rstudio][Lien Binder]] vers le manuscrit reproductible.

** Des solutions encore plus avancées : Docker, Guix

1. *La conteneurisation*. Pour aller plus loin, on peut aussi [[https://fr.wikipedia.org/wiki/Conteneur_(virtualisation)]["conteneuriser"]] son code, en isolant l'ensemble de l'environnement logiciel (versions de l'OS, des librairies système, du langage de programmation et de ses paquets) dans une forme légère de machine virtuelle, exécutable sur tout ordinateur. Cela rend le code intégralement reproductible. [[https://www.docker.com/][Docker]] (et sa plateforme de partage [[https://hub.docker.com/][DockerHub]]) est une solution populaire, mais est propriétaire et privée.
2. [[https://guix.gnu.org/][*GNU Guix*]] est une alternative libre, mais plus complexe et moins universelle. Il s'agit d'un système de gestion de paquets pour le système GNU, permettant de déployer des environnements reproductibles.

** Un exemple de publication "Dockerisée"

- *Référence* : Santos, Frédéric (2020). Modern methods for old data: An overview of some robust methods for outliers detection with applications in osteology. /Journal of Archaeological Science: Reports/, 32, 102423. 
- La publication finale : http://dx.doi.org/10.1016/j.jasrep.2020.102423
- Le dépôt GitLab associé : https://gitlab.com/f-santos/reproducibility-package-for-santos-2020-jasr
- [[https://hub.docker.com/repository/docker/fredsantos/compendium_santos2020_jasrep][Le conteneur logiciel permettant de reproduire les résultats]]

* DONE Archiver
  CLOSED: [2023-05-26 ven. 09:21]
** Principes
- Les dépôts sur des forges Git (GitLab, GitHub, ...) ne constituent pas des archives pérennes : ils peuvent disparaître... ou devenir payants !
- Plusieurs initiatives proposent au contraire un archivage pérenne du code informatique. Par exemple, Zenodo (dépôt volontaire par l'auteur du code), ou Software Heritage (moisson automatique à partir de plusieurs sources).
- Il faut donc bien distinguer les /plateformes de développement/ (forges Git), et les /entrepôts d'archivage/.

** Zenodo
#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
- [[https://zenodo.org/][Zenodo]] est une plateforme d'archivage de code et de données créée par le CERN.
- Tout dépôt sur Zenodo est définitif : ce qui y est déposé ne peut plus être retiré. En revanche, de nouvelles versions logicielles peuvent être soumises (correction de bugs, ajout de fonctionnalités, etc.).
- Tout dépôt sur Zenodo permet de recevoir un DOI : le logiciel devient donc citable en lui-même.
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
[[./images/zenodo-logo.png]]
#+REVEAL_HTML: </div>

** Exemple d'archivage d'un package Julia
   :PROPERTIES:
   :UNNUMBERED: t
   :END:

[[./images/zenodo.png]]

** Software Heritage
- [[https://www.softwareheritage.org/?lang=fr][Software Heritage]] est une initiative à but non lucratif (issue de l'Inria), garantissant un archivage pérenne.
- Software Heritage se donne pour mission /"de fournir une archive uniformisée, universelle, de tout le patrimoine logiciel de l'humanité"/.
- Par défaut, Software Heritage moissonne automatiquement et périodiquement le contenu des dépôts GitLab / GitHub, des archives de paquets usuelles (CRAN, CTAN, Npm, Pypi, ...).
- On peut aussi soumettre directement une source logicielle qui n'est pas moissonnée automatiquement.
- Les logiciels archivés (via leurs /blobs/ Git) reçoivent un identifiant unique, le SWHID.

** Exemple d'archivage d'un dépôt GitLab
   :PROPERTIES:
   :UNNUMBERED: t
   :END:

[[./images/rdss.png]]

* DONE Outils pour se former
  CLOSED: [2023-05-26 ven. 09:21]
** /Vers une recherche reproductible/
#+REVEAL_HTML: <div class="column" style="float:left; text-align:left; width: 40%">
- Un livre par Desquilbet et al., librement disponible en ligne sur HAL : https://hal.science/hal-02144142
- Une approche pratique partant de problématiques réelles, après un "travail de terrain" auprès de la communauté académique.
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; text-align:center; width: 60%">
[[./images/desquilbet.png]]
#+REVEAL_HTML: </div>

** Le MOOC Recherche reproductible
#+REVEAL_HTML: <div class="column" style="float:left; width: 40%">
- Un cours en ligne sur France Université Numérique (FUN), traitant de tous les aspects liés à la science ouverte : cahiers de laboratoire, transparence, reproductibilité computationnelle, etc.
- Plusieurs parcours disponibles en fonction du langage (Python ou R) et de l'environnement de développement (Emacs, Jupyter ou Rstudio).
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 60%">
[[./images/mooc_rr.png]]
#+REVEAL_HTML: </div>

** Des "articles-tutoriels"
De nombreux articles, publiés dans des revues académiques, fournissent des introductions très pédagogiques aux outils et enjeux de la science ouverte :

- Alston, J. M., & Rick, J. A. (2021). A Beginner's Guide to Conducting Reproducible Research. /The Bulletin of the Ecological Society of America/, 102(2), 01801. http://dx.doi.org/10.1002/bes2.1801
- Marwick, B. (2017). Open Science in Archaeology. http://dx.doi.org/10.17605/OSF.IO/3D6XX
- Marwick, B. (2017). Computational Reproducibility in Archaeological Research: Basic Principles and a Case Study of Their Implementation. /Journal of Archaeological Method and Theory/, 24(2), 424–450. http://dx.doi.org/10.1007/s10816-015-9272-9
- Munafò, Marcus R., Nosek, B. A., Bishop, D. V. M., /et al./ (2017). A manifesto for reproducible science. /Nature Human Behaviour/, 1(1), 1–9. http://dx.doi.org/10.1038/s41562-016-0021


