#+TITLE: Ouvrir et partager ses codes informatiques
#+AUTHOR: Frédéric Santos
#+EMAIL: frederic.santos@u-bordeaux.fr
#+DATE: Lundi 22 juin 2023
#+REVEAL_INIT_OPTIONS: width:1650, height:950, margin: 0.1, minScale:0.2, maxScale:2.5, transition:'fade', slideNumber:'c/t'
#+STARTUP: num
#+OPTIONS: toc:nil email:t timestamp:nil reveal_global_header:t
#+REVEAL_THEME: sky
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Atelier pour les journées SOFT (Bordeaux, 2023).">
#+REVEAL_POSTAMBLE: <p> Créé par Frédéric Santos </p>
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js

* Ouvrir (simplement)
** Versionner avec Git, publier sur des forges

** Rendre son code reproductible (exemple en R avec groundhog ou renv)

** Quelques exemples concrets

* Partager (avec les meilleures pratiques)
** Au-delà du script : les notebooks (Jupyter, Quarto, Org)

** Reproductibilité du code avec Binder

Bla

*** Principe

Bli

*** Illustration

Blo

** Des solutions encore plus avancées : Docker, Guix

1. *La conteneurisation*. Pour aller plus loin, on peut aussi [[https://fr.wikipedia.org/wiki/Conteneur_(virtualisation)]["conteneuriser"]] son code, en isolant l'ensemble de l'environnement logiciel (versions de l'OS, des librairies système, du langage de programmation et de ses paquets) dans une forme légère de machine virtuelle, exécutable sur tout ordinateur. Cela rend le code intégralement reproductible. [[https://www.docker.com/][Docker]] (et sa plateforme de partage [[https://hub.docker.com/][DockerHub]]) est une solution populaire, mais est propriétaire et privée.
2. [[https://guix.gnu.org/][*GNU Guix*]] est une alternative libre, mais plus complexe et moins universelle. Il s'agit d'un système de gestion de paquets pour le système GNU, permettant de déployer des environnements reproductibles.

** Un exemple de publication "Dockerisée"

- *Référence* : Santos, Frédéric (2020). Modern methods for old data: An overview of some robust methods for outliers detection with applications in osteology. /Journal of Archaeological Science: Reports/, 32, 102423. 
- La publication finale : http://dx.doi.org/10.1016/j.jasrep.2020.102423
- Le dépôt GitLab associé : https://gitlab.com/f-santos/reproducibility-package-for-santos-2020-jasr
- [[https://hub.docker.com/repository/docker/fredsantos/compendium_santos2020_jasrep][Le conteneur logiciel permettant de reproduire les résultats]]

* Archiver
** Principes
- Les dépôts sur des forges Git (GitLab, GitHub, ...) ne constituent pas des archives pérennes : ils peuvent disparaître... ou devenir payants !
- Plusieurs initiatives proposent au contraire un archivage pérenne du code informatique. Par exemple, Zenodo (dépôt volontaire par l'auteur du code), ou Software Heritage (moisson automatique à partir de plusieurs sources).
- Il faut donc bien distinguer les /plateformes de développement/ (forges Git), et les /entrepôts d'archivage/.

** Zenodo
#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
- [[https://zenodo.org/][Zenodo]] est une plateforme d'archivage de code et de données créée par le CERN.
- Tout dépôt sur Zenodo est définitif : ce qui y est déposé ne peut plus être retiré. En revanche, de nouvelles versions logicielles peuvent être soumises (correction de bugs, ajout de fonctionnalités, etc.).
- Tout dépôt sur Zenodo permet de recevoir un DOI : le logiciel devient donc citable en lui-même.
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
[[./images/zenodo-logo.png]]
#+REVEAL_HTML: </div>

** Exemple d'archivage d'un package Julia
   :PROPERTIES:
   :UNNUMBERED: t
   :END:

[[./images/zenodo.png]]

** Software Heritage
- [[https://www.softwareheritage.org/?lang=fr][Software Heritage]] est une initiative à but non lucratif (issue de l'Inria), garantissant un archivage pérenne.
- Software Heritage se donne pour mission /"de fournir une archive uniformisée, universelle, de tout le patrimoine logiciel de l'humanité"/.
- Par défaut, Software Heritage moissonne automatiquement et périodiquement le contenu des dépôts GitLab / GitHub, des archives de paquets usuelles (CRAN, CTAN, Npm, Pypi, ...).
- On peut aussi soumettre directement une source logicielle qui n'est pas moissonnée automatiquement.
- Les logiciels archivés (via leurs /blobs/ Git) reçoivent un identifiant unique, le SWHID.

** Exemple d'archivage d'un dépôt GitLab
   :PROPERTIES:
   :UNNUMBERED: t
   :END:

[[./images/rdss.png]]

* Outils pour se former
** /Vers une recherche reproductible/
#+REVEAL_HTML: <div class="column" style="float:left; text-align:left; width: 40%">
- Un livre par Desquilbet et al., librement disponible en ligne sur HAL : https://hal.science/hal-02144142
- Une approche pratique partant de problématiques réelles, après un "travail de terrain" auprès de la communauté académique.
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; text-align:center; width: 60%">
[[./images/desquilbet.png]]
#+REVEAL_HTML: </div>

** Le MOOC Recherche reproductible
#+REVEAL_HTML: <div class="column" style="float:left; width: 40%">
- Un cours en ligne sur France Université Numérique (FUN), traitant de tous les aspects liés à la science ouverte : cahiers de laboratoire, transparence, reproductibilité computationnelle, etc.
- Plusieurs parcours disponibles en fonction du langage (Python ou R) et de l'environnement de développement (Emacs, Jupyter ou Rstudio).
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 60%">
[[./images/mooc_rr.png]]
#+REVEAL_HTML: </div>

** Des "articles-tutoriels"
De nombreux articles, publiés dans des revues académiques, fournissent des introductions très pédagogiques aux outils et enjeux de la science ouverte :

- Alston, J. M., & Rick, J. A. (2021). A Beginner's Guide to Conducting Reproducible Research. /The Bulletin of the Ecological Society of America/, 102(2), 01801. http://dx.doi.org/10.1002/bes2.1801
- Marwick, B. (2017). Open Science in Archaeology. http://dx.doi.org/10.17605/OSF.IO/3D6XX
- Marwick, B. (2017). Computational Reproducibility in Archaeological Research: Basic Principles and a Case Study of Their Implementation. /Journal of Archaeological Method and Theory/, 24(2), 424–450. http://dx.doi.org/10.1007/s10816-015-9272-9
- Munafò, Marcus R., Nosek, B. A., Bishop, D. V. M., /et al./ (2017). A manifesto for reproducible science. /Nature Human Behaviour/, 1(1), 1–9. http://dx.doi.org/10.1038/s41562-016-0021


